name: Connect to EC2 Instance

on:
  push:
    branches:
      - main  # Adjust the branch as per your requirement

jobs:
  connect_to_ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Initialize Terraform
        run: terraform init
        working-directory: Terraform

      - name: Plan Terraform
        run: terraform plan
        working-directory: Terraform

      - name: Apply Terraform
        run: terraform apply --auto-approve
        working-directory: ./Terraform

      - name: Get outputs
        uses: dflook/terraform-output@v1
        id: tf-outputs
        with:
          path: ./Terraform  # Adjust the path to your Terraform configuration directory

      - name: Display Public IP
        run: |
          echo "Public IP Address: ${{ steps.tf-outputs.outputs.web_server_public_ip }}"
        
      - name: Wait for 1 minutes
        if: always()
        run: sleep 60


# Ansible Section





      - name: Display repository contents-check
        run: |
          echo "Displaying repository contents..."
          ls -R
  
      - name: Generate Ansible Inventory
        run: |
          echo "[my_ec2_instances]" > ./Ansible/ansible_inventory.ini
          echo "${{ steps.tf-outputs.outputs.web_server_public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa" >> ./Ansible/ansible_inventory.ini
    
      - name: Display Ansible Ini
        run: |
          echo "Contents of Ansible Inventory:"
          cat ./Ansible/ansible_inventory.ini    

      - name: Display Contents in Ansible Folder
        run: |
            ls ./Ansible
               
      - name: Display pem file
        run: |
            cat ./Ansible/access_to_ec2.pem
                   
      - name: Display ansible_inventory.ini
        run: |
            cat ./Ansible/ansible_inventory.ini
                       
      - name: Display ansible playbook
        run: |
            cat ./Ansible/installDjangoapp.yaml
                                                  



      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
           playbook: ./Ansible/installDjangoapp.yaml
           key: ${{ secrets.SSH_KEY }}
           inventory: |
             [my_ec2_instances]
             ${{ steps.tf-outputs.outputs.web_server_public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa
           known_hosts: |
             ${{ steps.tf-outputs.outputs.web_server_public_ip }} $(ssh-keyscan -H ${{ steps.tf-outputs.outputs.web_server_public_ip }} 2>/dev/null | awk '{print $3}')
           options: |
             --inventory ./Ansible/ansible_inventory.ini
             --verbose
        env:
           AWS_DEFAULT_REGION: eu-west-2
           AWS_REGION: eu-west-2
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    


      - name: Wait for 2 minutes
        if: always()  # Ensure this step runs regardless of previous steps
        run: sleep 3000
    

      - name: Check if Ansible is installed
        id: check_ansible
        run: |
          if command -v ansible >/dev/null 2>&1; then
            echo "Ansible is installed."
            echo "::set-output name=ansible_installed::true"
            ansible --version
          else
            echo "Ansible is not installed."
            echo "::set-output name=ansible_installed::false"
            exit 1
          fi

      - name: Setup SSH
        shell: bash
        run: |
          eval `ssh-agent -s`
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.tf-outputs.outputs.web_server_public_ip }} >> ~/.ssh/known_hosts

      - name: Update Ansible inventory with public IP
        run: |
          echo "[my_ec2_instances]" > ./Ansible/ansible_inventory.ini
          echo "${{ steps.tf-outputs.outputs.web_server_public_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ./Ansible/ansible_inventory.ini

      - name: Connect to EC2 Instance and run command
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.tf-outputs.outputs.web_server_public_ip }} 'ls -la'
        if: success() # Only run if previous step succeeded

      - name: Run Ansible playbook
        if: steps.check_ansible.outputs.ansible_installed == 'true'
        run: |
          ansible-playbook -i ./Ansible/ansible_inventory.ini ./Ansible/installDjangoapp.yaml --private-key ~/.ssh/id_rsa -u ec2-user -vvv
        env:
          AWS_DEFAULT_REGION: eu-west-2
          AWS_REGION: eu-west-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


# Terraform Section - Destroy Section 

      - name: Wait for 2 minutes
        if: always()
        run: sleep 200

      - name: Clean up Terraform
        if: always()
        run: terraform destroy --auto-approve
        working-directory: ./Terraform